<?php
declare(strict_types=1);
namespace fileupload;

use facadeSchema\ResourceInformation;
use facadeSchema\ResourceType;
use facadeSchema\ResourceURI;
use framework\GenericResponse;
use framework\VulnerabilityDefinitionProvider;
use facadeSchema\VulnerabilityDefinition;
use facadeSchema\VulnerabilityLevelDefinition;
use facadeSchema\Variant;
use facadeSchema\VulnerabilityType;

require __DIR__ . "/FileProperties.php";
require __DIR__ . "/../framework/GenericResponse.php";
require __DIR__ . "/../framework/VulnerabilityDefinitionProvider.php";
require __DIR__ . "/../facadeSchema/VulnerabilityDefinition.php";
require __DIR__ . "/../facadeSchema/VulnerabilityLevelDefinition.php";
require __DIR__ . "/../facadeSchema/Variant.php";
require __DIR__ . "/../facadeSchema/ResourceInformation.php";
require __DIR__ . "/../facadeSchema/ResourceType.php";
require __DIR__ . "/../facadeSchema/ResourceURI.php";
require __DIR__ . "/../facadeSchema/VulnerabilityType.php";

class FileUpload implements VulnerabilityDefinitionProvider
{
    private function get_file_properties()
    {
        $file_name = $_FILES["file"]["name"];
        $file_size = $_FILES["file"]["size"];
        $file_type = $_FILES["file"]["type"];
        $file_properties = new FileProperties(
            $file_name,
            $file_size,
            $file_type
        );
        return $file_properties;
    }

    private function sizeValidator(
        FileProperties $file_properties,
        array $errors
    ) {
        if ($file_properties->get_file_size() > 2097152) {
            array_push($errors, "File size must be excately 2 MB");
        }
    }

    private function generateResponse(
        FileProperties $file_properties,
        array $errors
    ) {
        if (!empty($errors)) {
            echo json_encode(
                new GenericResponse(false, "", json_encode($errors))
            );
        } else {
            echo json_encode($this->upload($file_properties));
        }
    }

    private function upload(FileProperties $file_properties)
    {
        $file_tmp = $_FILES["file"]["tmp_name"];
        $uploaded_file_uri =
            "/VulnerableApp-php/images/" . $file_properties->get_file_name();
        $file_destination = $_SERVER["DOCUMENT_ROOT"] . $uploaded_file_uri;
        move_uploaded_file($file_tmp, $file_destination);
        return new GenericResponse(true, $uploaded_file_uri, "");
    }

    function level1()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    function level2()
    {
        if (isset($_FILES["file"])) {
            $errors = [];
            $file_properties = $this->get_file_properties();
            $extensions = ["jpeg", "jpg", "png"];
            $this->sizeValidator($file_properties, $errors);
            $tmp = explode(".", $_FILES["file"]["name"]);
            $file_ext = strtolower(end($tmp));
            if (in_array($file_ext, $extensions) === false) {
                array_push(
                    $errors,
                    "extension not allowed, please choose a JPEG or PNG file."
                );
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(
                new GenericResponse(false, "", "Invalid File Information")
            );
        }
    }

    function getVulnerabilityDefinition(): VulnerabilityDefinition
    {
        $vulnerabilityDefinition = new VulnerabilityDefinition();
        $vulnerabilityDefinition->set_id("FileUpload");
        $vulnerabilityDefinition->set_name("FileUpload");
        $vulnerabilityDefinition->set_description("");
        $vulnerabilityType = new VulnerabilityType(
            "CUSTOM",
            "Unrestricted File Upload"
        );
        $vulnerabilityDefinition->set_vulnerability_types([$vulnerabilityType]);

        $vulnerabilityLevel = new VulnerabilityLevelDefinition();
        $vulnerabilityLevel->set_level("LEVEL_1");
        $vulnerabilityLevel->set_variant(Variant::UNSECURE);

        $htmlResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.html",
            ResourceType::HTML
        );
        $jsResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.js",
            ResourceType::JAVASCRIPT
        );
        $cssResourceUri = new ResourceURI(
            false,
            "VulnerableApp-php/templates/FileUploadVulnerability/LEVEL_1/FileUpload.css",
            ResourceType::CSS
        );
        $resourceInformation = new ResourceInformation();
        $resourceInformation->set_html_resource($htmlResourceUri);
        $resourceInformation->add_static_resources($jsResourceUri);
        $resourceInformation->add_static_resources($cssResourceUri);
        $vulnerabilityLevel->set_resource_information($resourceInformation);
        $vulnerabilityDefinition->add_level_definition($vulnerabilityLevel);

        $vulnerabilityLevel = new VulnerabilityLevelDefinition();
        $vulnerabilityLevel->set_level("LEVEL_2");
        $vulnerabilityLevel->set_variant(Variant::UNSECURE);
        $vulnerabilityLevel->set_resource_information($resourceInformation);
        $vulnerabilityDefinition->add_level_definition($vulnerabilityLevel);

        return $vulnerabilityDefinition;
    }
}
?>
