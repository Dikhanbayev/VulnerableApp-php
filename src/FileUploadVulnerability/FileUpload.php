<?php
declare(strict_types=1);
namespace fileupload;
use framework\GenericResponse;
use framework\VulnerabilityDefinitionProvider;
use facadeSchema\VulnerabilityDefinition;

require __DIR__."/../facadeSchema/VulnerabilityDefinition.php";
require __DIR__."/../framework/GenericResponse.php";
require __DIR__."/../framework/VulnerabilityDefinitionProvider.php";

class FileUpload implements VulnerabilityDefinitionProvider {

    private function get_file_properties()
    {
        $file_name = $_FILES['file']['name'];
        $file_size = $_FILES['file']['size'];
        $file_type = $_FILES['file']['type'];
        $file_properties = new FileProperties($file_name, $file_size, $file_type);
        return $file_properties;
    }

    private function sizeValidator(FileProperties $file_properties, array $errors)
    {
        if ($file_properties->get_file_size() > 2097152) {
            array_push($errors, "File size must be excately 2 MB");
        }
    }

    private function generateResponse(FileProperties $file_properties, array $errors) {
        if (!empty($errors)) {
            echo json_encode(new GenericResponse(false, "", json_encode($errors)));
        } else {
            echo json_encode($this->upload($file_properties));
        }
    }

    private function upload(FileProperties $file_properties)
    {
        $file_tmp = $_FILES['file']['tmp_name'];
        $file_destination = $_SERVER['DOCUMENT_ROOT'] . '/VulnerableApp-php/images/' . $file_properties->get_file_name();
        move_uploaded_file($file_tmp, $file_destination);
        return new GenericResponse(true, $file_destination, "");
    }

    function level1()
    {
        if (isset($_FILES['file'])) {
            $errors = array();
            $file_properties = $this->get_file_properties();
            $this->sizeValidator($file_properties, $errors);
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(new GenericResponse(false, "", "Invalid File Information"));
        }
    }

    function level2() {
        if (isset($_FILES['file'])) {
            $errors = array();
            $file_properties = $this->get_file_properties();
            $extensions = array("jpeg", "jpg", "png");
            $this->sizeValidator($file_properties, $errors);
            $file_ext = strtolower(end(explode('.', $_FILES['file']['name'])));
            if (in_array($file_ext, $extensions) === false) {
                array_push($errors, "extension not allowed, please choose a JPEG or PNG file.");
            }
            $this->generateResponse($file_properties, $errors);
        } else {
            echo json_encode(new GenericResponse(false, "", "Invalid File Information"));
        }
    }

    function getVulnerabilityDefinition(): VulnerabilityDefinition {
        $vulnerabilityDefinition = new VulnerabilityDefinition();
        $vulnerabilityDefinition->set_id("FileUpload");
        $vulnerabilityDefinition->set_description("Something");
        return $vulnerabilityDefinition;
    }
}
?>
